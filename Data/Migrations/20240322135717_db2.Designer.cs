// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240322135717_db2")]
    partial class db2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.DataCore.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address2");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address3");

                    b.Property<string>("ContactName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Contactemail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contactemail");

                    b.Property<string>("Countrycode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("countrycode");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("currency")
                        .IsFixedLength();

                    b.Property<string>("Deliveryaddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress1");

                    b.Property<string>("Deliveryaddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress2");

                    b.Property<string>("Deliveryaddress3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress3");

                    b.Property<string>("Deliverycountrycode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("deliverycountrycode");

                    b.Property<string>("Deliverypostalarea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliverypostalarea");

                    b.Property<string>("Deliverypostalcode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("deliverypostalcode");

                    b.Property<int>("Export")
                        .HasColumnType("int")
                        .HasColumnName("export");

                    b.Property<string>("Fax")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("fax");

                    b.Property<string>("InvoiceEmail")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("InvoicedAmount2015")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActiveViaInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveViaOrders")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpider")
                        .HasColumnType("bit");

                    b.Property<string>("Logotype")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Mailingemail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mailingemail");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Orgnr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("orgnr");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Passwordservices")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("passwordservices");

                    b.Property<string>("Phone")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("phone");

                    b.Property<string>("Postalarea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postalarea");

                    b.Property<string>("Postalcode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("postalcode");

                    b.Property<double>("SpecialDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<int>("SpecialExpFee")
                        .HasColumnType("int");

                    b.Property<string>("System")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemKundId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ToBlocket")
                        .HasColumnType("bit");

                    b.Property<string>("Vatno")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("vatno");

                    b.Property<string>("Webadress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("webadress");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F29ECEF59");

                    b.ToTable("customer", null, t =>
                        {
                            t.HasTrigger("TR_Customer_DeleteEvent");

                            t.HasTrigger("TR_Customer_InsertEvent");

                            t.HasTrigger("TR_Customer_UpdateEvent");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.DataCore.CustomerArchived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .HasColumnType("xml");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerArchived", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.CustomerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CustomerEvent", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Customercontact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F2DBD803D");

                    b.ToTable("customercontact", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Customergroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<int?>("Groupid")
                        .HasColumnType("int")
                        .HasColumnName("groupid");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F455FFFA4");

                    b.ToTable("customergroup", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Customernote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Createdby")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("createdby");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted");

                    b.Property<string>("Text")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F318E1121");

                    b.ToTable("customernote", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Customertagset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<int?>("Tagid")
                        .HasColumnType("int")
                        .HasColumnName("tagid");

                    b.HasKey("Id")
                        .HasName("PK__customer__3213E83F63256CB5");

                    b.ToTable("customertagset", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address2");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address3");

                    b.Property<DateTime>("Claim")
                        .HasColumnType("datetime")
                        .HasColumnName("claim");

                    b.Property<string>("Countrycode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("countrycode");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime>("Credit")
                        .HasColumnType("datetime")
                        .HasColumnName("credit");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("currency");

                    b.Property<int>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<string>("Customervat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customervat");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted");

                    b.Property<string>("Deliveryaddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress1");

                    b.Property<string>("Deliveryaddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress2");

                    b.Property<string>("Deliveryaddress3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryaddress3");

                    b.Property<string>("Deliverycountrycode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("deliverycountrycode");

                    b.Property<string>("Deliverymode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliverymode");

                    b.Property<string>("Deliveryname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryname");

                    b.Property<string>("Deliverypostalarea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliverypostalarea");

                    b.Property<string>("Deliverypostalcode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("deliverypostalcode");

                    b.Property<string>("Deliveryterms")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("deliveryterms");

                    b.Property<string>("Domicile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("domicile");

                    b.Property<DateTime>("Duedate")
                        .HasColumnType("datetime")
                        .HasColumnName("duedate");

                    b.Property<double>("Evenout")
                        .HasColumnType("float")
                        .HasColumnName("evenout");

                    b.Property<double>("Expfee")
                        .HasColumnType("float")
                        .HasColumnName("expfee");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("nchar(40)")
                        .HasDefaultValue("")
                        .IsFixedLength();

                    b.Property<string>("ExternalSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<double>("Freight")
                        .HasColumnType("float")
                        .HasColumnName("freight");

                    b.Property<DateTime>("Invoicedate")
                        .HasColumnType("datetime")
                        .HasColumnName("invoicedate");

                    b.Property<int>("Invoiceid")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<bool?>("Iscredit")
                        .HasColumnType("bit")
                        .HasColumnName("iscredit");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("Orderno")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("orderno");

                    b.Property<string>("Ourreference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ourreference");

                    b.Property<string>("Ourvat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ourvat");

                    b.Property<DateTime?>("Payed")
                        .HasColumnType("datetime")
                        .HasColumnName("payed");

                    b.Property<int>("PertainsToCredit")
                        .HasColumnType("int");

                    b.Property<string>("Postalarea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postalarea");

                    b.Property<string>("Postalcode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("postalcode");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reference");

                    b.Property<DateTime>("Reminder")
                        .HasColumnType("datetime")
                        .HasColumnName("reminder");

                    b.Property<DateTime>("Sent")
                        .HasColumnType("datetime")
                        .HasColumnName("sent");

                    b.Property<double>("Sum")
                        .HasColumnType("float")
                        .HasColumnName("sum");

                    b.Property<string>("Termspayment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("termspayment");

                    b.Property<double>("Totalsum")
                        .HasColumnType("float")
                        .HasColumnName("totalsum");

                    b.Property<double>("Vat")
                        .HasColumnType("float")
                        .HasColumnName("vat");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Customerid" }, "IX_invoice_customerid");

                    b.HasIndex(new[] { "Invoiceid" }, "IX_invoice_invoiceid");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.InvoiceArchived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Invoice")
                        .HasColumnType("xml");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InvoiceArchived", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Invoicematerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Currencycode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("currencycode");

                    b.Property<int>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("details");

                    b.Property<double>("Discountamount")
                        .HasColumnType("float")
                        .HasColumnName("discountamount");

                    b.Property<int>("Invoiceid")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<int>("Invoiceto")
                        .HasColumnType("int")
                        .HasColumnName("invoiceto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2")
                        .HasColumnName("period");

                    b.Property<string>("Productcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("productcode");

                    b.Property<int>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reference");

                    b.Property<DateTime>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("sent");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("unit");

                    b.Property<double>("Vatpct")
                        .HasColumnType("float")
                        .HasColumnName("vatpct");

                    b.HasKey("Id")
                        .HasName("PK__invoicem__3213E83F0ECEE4C9");

                    b.HasIndex(new[] { "Customerid" }, "IX_invoicematerial_customerid");

                    b.ToTable("invoicematerial", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Invoicerow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Currency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<double>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("discount")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<int>("Invoiceid")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("unit");

                    b.Property<double>("Vatpct")
                        .HasColumnType("float")
                        .HasColumnName("vatpct");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Invoiceid" }, "IX_invoicerow_invoiceid");

                    b.ToTable("invoicerow", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Orderitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(CONVERT([bit],case when [deleted]<='1901-01-01' AND ([contractends]<='1901-01-01' OR [contractends]>getdate()) AND ([contractstarts]<='1901-01-01' OR [contractstarts]<getdate()) then (1) else (0) end,0))", false);

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address2");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address3");

                    b.Property<string>("Bywho")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bywho");

                    b.Property<DateTime?>("Contractends")
                        .HasColumnType("datetime")
                        .HasColumnName("contractends");

                    b.Property<DateTime?>("Contractstarts")
                        .HasColumnType("datetime")
                        .HasColumnName("contractstarts");

                    b.Property<string>("Countrycode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("countrycode");

                    b.Property<string>("Currency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("currency");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted");

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<string>("How")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("how");

                    b.Property<int?>("Invoicecyclesinmonths")
                        .HasColumnType("int")
                        .HasColumnName("invoicecyclesinmonths");

                    b.Property<int?>("Invoiceto")
                        .HasColumnType("int")
                        .HasColumnName("invoiceto");

                    b.Property<DateTime?>("Orderdate")
                        .HasColumnType("datetime")
                        .HasColumnName("orderdate");

                    b.Property<string>("Ordernr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ordernr");

                    b.Property<string>("Postalarea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postalarea");

                    b.Property<string>("Postalcode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("postalcode");

                    b.Property<int?>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reference");

                    b.Property<double?>("Specialprice")
                        .HasColumnType("float")
                        .HasColumnName("specialprice");

                    b.Property<int?>("Vatid")
                        .HasColumnType("int")
                        .HasColumnName("vatid");

                    b.HasKey("Id")
                        .HasName("PK__orderite__3213E83F5B844AED");

                    b.HasIndex("Productid");

                    b.ToTable("orderitem", null, t =>
                        {
                            t.HasTrigger("TR_OrderItem");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.DataCore.Ovfakturahistorik", b =>
                {
                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("MONTH");

                    b.Property<int>("NMaklarid")
                        .HasColumnType("int")
                        .HasColumnName("N_MAKLARID");

                    b.Property<int?>("NAntal")
                        .HasColumnType("int")
                        .HasColumnName("N_ANTAL");

                    b.Property<int?>("NOvAnnonspaket")
                        .HasColumnType("int")
                        .HasColumnName("N_OV_ANNONSPAKET");

                    b.Property<int?>("NSumma")
                        .HasColumnType("int")
                        .HasColumnName("N_SUMMA");

                    b.HasKey("Year", "Month", "NMaklarid")
                        .HasName("PK__OVFAKTURAHISTORI__481183C6");

                    b.ToTable("OVFAKTURAHISTORIK", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Ovfakturaunderlag", b =>
                {
                    b.Property<int>("LOvfakturaunderlagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("l_OVFakturaunderlagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LOvfakturaunderlagId"));

                    b.Property<bool>("BFakturerad")
                        .HasColumnType("bit")
                        .HasColumnName("b_fakturerad");

                    b.Property<DateTime>("DatDatum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("dat_datum")
                        .HasDefaultValueSql("(convert(datetime,(convert(varchar(10),getdate(),102) + ' 00:00:00')))");

                    b.Property<DateTime?>("DatFakturadatum")
                        .HasColumnType("datetime")
                        .HasColumnName("dat_fakturadatum");

                    b.Property<DateTime?>("DatStop")
                        .HasColumnType("datetime")
                        .HasColumnName("DAT_STOP");

                    b.Property<int>("LObjektnr")
                        .HasColumnType("int")
                        .HasColumnName("l_objektnr");

                    b.Property<short?>("NFakturatyp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("n_fakturatyp");

                    b.Property<short?>("NLankom")
                        .HasColumnType("smallint")
                        .HasColumnName("n_lankom");

                    b.Property<short>("NMaklarid")
                        .HasColumnType("smallint")
                        .HasColumnName("n_maklarid");

                    b.Property<short>("NTyp")
                        .HasColumnType("smallint")
                        .HasColumnName("n_typ");

                    b.Property<string>("SAdress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("s_adress");

                    b.Property<string>("SOmrade")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("s_omrade");

                    b.HasKey("LOvfakturaunderlagId");

                    b.HasIndex(new[] { "NMaklarid", "DatDatum", "LObjektnr", "NFakturatyp" }, "IDX_OVFakturaunderlag_MaklaridDatumObjektnr")
                        .IsUnique()
                        .HasFilter("[n_fakturatyp] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "NMaklarid", "DatDatum", "LObjektnr", "NFakturatyp" }, "IDX_OVFakturaunderlag_MaklaridDatumObjektnr"), 90);

                    b.ToTable("OVFakturaunderlag", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Ovrabatt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BAktiv")
                        .HasColumnType("bit")
                        .HasColumnName("b_aktiv");

                    b.Property<DateTime?>("DatAndrad")
                        .HasColumnType("datetime")
                        .HasColumnName("dat_andrad");

                    b.Property<DateTime?>("DatSkapad")
                        .HasColumnType("datetime")
                        .HasColumnName("dat_skapad");

                    b.Property<DateTime?>("DatUpphor")
                        .HasColumnType("datetime")
                        .HasColumnName("DAT_UPPHOR");

                    b.Property<int?>("NMaklarid")
                        .HasColumnType("int")
                        .HasColumnName("n_maklarid");

                    b.Property<int?>("Pakettyp")
                        .HasColumnType("int")
                        .HasColumnName("PAKETTYP");

                    b.Property<int?>("Rabattprocent")
                        .HasColumnType("int")
                        .HasColumnName("RABATTPROCENT");

                    b.Property<int?>("RabattprocentInfo")
                        .HasColumnType("int")
                        .HasColumnName("RABATTPROCENT_INFO");

                    b.Property<string>("SKommentar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("s_kommentar");

                    b.HasKey("Id")
                        .HasName("PK__OVRabatt__3214EC276BBAB2B6");

                    b.ToTable("OVRabatt", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("currency")
                        .IsFixedLength();

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("InvoiceCyclesInMoths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("OrderCanOverridePrice")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("Pricetype")
                        .HasColumnType("int")
                        .HasColumnName("pricetype");

                    b.Property<string>("Rules")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("rules");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("unit")
                        .IsFixedLength();

                    b.Property<int?>("Vatid")
                        .HasColumnType("int")
                        .HasColumnName("vatid");

                    b.HasKey("Id")
                        .HasName("PK__product__3213E83F57B3BA09");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "ix_ProductId");

                    b.ToTable("ProductPrice", (string)null);
                });

            modelBuilder.Entity("Core.Models.Boostning.Boost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Boost");
                });

            modelBuilder.Entity("Core.Models.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Leadcount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastvisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("officeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("Core.Models.Leads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Core.Models.User.Agent", b =>
                {
                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("changedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("imageId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("officeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactInformationId");

                    b.HasIndex("imageId");

                    b.HasIndex("officeId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Core.Models.User.Officeaffiliation", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgentcustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("officeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("AgentcustomerId");

                    b.ToTable("OfficeAffiliations");
                });

            modelBuilder.Entity("Core.Models.UserModels.Office", b =>
                {
                    b.Property<string>("officeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("changedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("corporateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("corporateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logotype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("organizationId")
                        .HasColumnType("int");

                    b.Property<string>("organizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("officeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactInformationId");

                    b.HasIndex("organizationId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Core.Models.UserModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Core.Models.shared.AddressModel", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountyMunicipalityParishCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wgs84KoordinaterId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("Wgs84KoordinaterId");

                    b.ToTable("AddressModel");
                });

            modelBuilder.Entity("Core.Models.shared.ContactInformation", b =>
                {
                    b.Property<int>("ContactInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactInformationId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactInformationId");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("Core.Models.shared.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dataChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Core.Models.shared.Wgs84Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Wgs84Coordinate");
                });

            modelBuilder.Entity("Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5fb558cb-3aac-47c2-804d-171e283bb4e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "985e96f0-46cf-4e46-9a8b-289c8979555e",
                            Email = "admin@bovision.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@bovision.se",
                            NormalizedUserName = "admin@bovision.se",
                            PasswordHash = "AQAAAAIAAYagAAAAENdOfXZzKblXzZokst32vCrfnC7u3HmDgM4dSQwqWUHU9+xmJ9/kNaQQFtgaw2bZDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7873d41-a0a0-4de1-97ea-c2d8f0ce04e9",
                            TwoFactorEnabled = false,
                            UserName = "admin@bovision.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fa15c2cd-2e3d-4857-b695-1ac55079e4bc",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "8fc9d591-a9ee-42f3-9187-73beaa59e519",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5fb558cb-3aac-47c2-804d-171e283bb4e7",
                            RoleId = "8fc9d591-a9ee-42f3-9187-73beaa59e519"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.DataCore.Invoice", b =>
                {
                    b.HasOne("Core.DataCore.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("Customerid")
                        .IsRequired()
                        .HasConstraintName("fk_invoice_customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.DataCore.Orderitem", b =>
                {
                    b.HasOne("Core.DataCore.Product", "Product")
                        .WithMany("Orderitems")
                        .HasForeignKey("Productid")
                        .HasConstraintName("fk_orderitem_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.Boostning.Boost", b =>
                {
                    b.HasOne("Core.Models.Estate", null)
                        .WithMany("boost")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Leads", b =>
                {
                    b.HasOne("Core.Models.Estate", null)
                        .WithMany("leads")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.User.Agent", b =>
                {
                    b.HasOne("Core.Models.shared.AddressModel", "address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.shared.ContactInformation", "contactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.shared.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.Office", null)
                        .WithMany("agents")
                        .HasForeignKey("officeId");

                    b.Navigation("address");

                    b.Navigation("contactInformation");

                    b.Navigation("image");
                });

            modelBuilder.Entity("Core.Models.User.Officeaffiliation", b =>
                {
                    b.HasOne("Core.Models.User.Agent", null)
                        .WithMany("officeAffiliations")
                        .HasForeignKey("AgentcustomerId");
                });

            modelBuilder.Entity("Core.Models.UserModels.Office", b =>
                {
                    b.HasOne("Core.Models.shared.AddressModel", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.shared.ContactInformation", "contactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.Organization", null)
                        .WithMany("Offices")
                        .HasForeignKey("organizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("contactInformation");
                });

            modelBuilder.Entity("Core.Models.shared.AddressModel", b =>
                {
                    b.HasOne("Core.Models.shared.Wgs84Coordinate", "Wgs84Koordinater")
                        .WithMany()
                        .HasForeignKey("Wgs84KoordinaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wgs84Koordinater");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DataCore.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Core.DataCore.Product", b =>
                {
                    b.Navigation("Orderitems");
                });

            modelBuilder.Entity("Core.Models.Estate", b =>
                {
                    b.Navigation("boost");

                    b.Navigation("leads");
                });

            modelBuilder.Entity("Core.Models.User.Agent", b =>
                {
                    b.Navigation("officeAffiliations");
                });

            modelBuilder.Entity("Core.Models.UserModels.Office", b =>
                {
                    b.Navigation("agents");
                });

            modelBuilder.Entity("Core.Models.UserModels.Organization", b =>
                {
                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
